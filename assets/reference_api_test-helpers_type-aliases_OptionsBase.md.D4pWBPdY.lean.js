import{_ as t,c as a,a2 as s,o as i}from"./chunks/framework.CW1_h_Kn.js";const k=JSON.parse('{"title":"Type Alias: OptionsBase<ThrowOnError>","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/test-helpers/type-aliases/OptionsBase.md","filePath":"reference/api/test-helpers/type-aliases/OptionsBase.md"}'),r={name:"reference/api/test-helpers/type-aliases/OptionsBase.md"};function o(n,e,p,l,h,d){return i(),a("div",null,e[0]||(e[0]=[s('<p><a href="./../../modules.html">workloads</a> / <a href="./../">test-helpers</a> / OptionsBase</p><h1 id="type-alias-optionsbase-throwonerror" tabindex="-1">Type Alias: OptionsBase&lt;ThrowOnError&gt; <a class="header-anchor" href="#type-alias-optionsbase-throwonerror" aria-label="Permalink to &quot;Type Alias: OptionsBase\\&lt;ThrowOnError\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OptionsBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThrowOnError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;: Omit&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestOptionsBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThrowOnError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &amp; object;</span></span></code></pre></div><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>client</code>?</td><td><code>Client</code></td><td>You can provide a client instance returned by <code>createClient()</code> instead of individual options. This might be also useful if you want to implement a custom client.</td></tr></tbody></table><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table><thead><tr><th>Type Parameter</th></tr></thead><tbody><tr><td><p><code>ThrowOnError</code> <em>extends</em> <code>boolean</code></p></td></tr></tbody></table>',7)]))}const y=t(r,[["render",o]]);export{k as __pageData,y as default};
