import{_ as t,c as a,a2 as o,o as r}from"./chunks/framework.CW1_h_Kn.js";const m=JSON.parse('{"title":"Interface: RetryOptions","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/main/interfaces/RetryOptions.md","filePath":"reference/api/main/interfaces/RetryOptions.md"}'),s={name:"reference/api/main/interfaces/RetryOptions.md"};function i(n,e,d,c,p,l){return r(),a("div",null,e[0]||(e[0]=[o('<p><a href="./../../modules.html">workloads</a> / <a href="./../">main</a> / RetryOptions</p><h1 id="interface-retryoptions" tabindex="-1">Interface: RetryOptions <a class="header-anchor" href="#interface-retryoptions" aria-label="Permalink to &quot;Interface: RetryOptions&quot;">​</a></h1><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Default value</th><th>Description</th></tr></thead><tbody><tr><td><code>backoff?</code></td><td><code>ExponentialBackoff</code> | <code>ConstantBackoff</code></td><td><code>{ type: &quot;constant&quot;, delay: 0 }</code></td><td>Backoff setting for automatic retries if the job fails. <strong>Important</strong> This setting does not have any effect on Tasks backed by an <code>SQS</code> queue in production. Retries will happen after the <code>VisibilityTimeout</code> of the message expires (30 seconds by default). See: <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html#consumer-fails-to-process-message" target="_blank" rel="noreferrer">https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html#consumer-fails-to-process-message</a> You can to implement an custom backoff strategy using a dead-letter queue to handle retries and a Lambda function.</td></tr><tr><td><code>times</code></td><td><code>number</code></td><td><code>0</code></td><td>The total number of attempts to try the job until it completes.</td></tr></tbody></table>',4)]))}const h=t(s,[["render",i]]);export{m as __pageData,h as default};
