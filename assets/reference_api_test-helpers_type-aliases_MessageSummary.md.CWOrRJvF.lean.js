import{_ as t,c as d,a2 as s,o as a}from"./chunks/framework.CW1_h_Kn.js";const m=JSON.parse('{"title":"Type Alias: MessageSummary","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/test-helpers/type-aliases/MessageSummary.md","filePath":"reference/api/test-helpers/type-aliases/MessageSummary.md"}'),r={name:"reference/api/test-helpers/type-aliases/MessageSummary.md"};function o(c,e,i,l,n,p){return a(),d("div",null,e[0]||(e[0]=[s('<p><a href="./../../modules.html">workloads</a> / <a href="./../">test-helpers</a> / MessageSummary</p><h1 id="type-alias-messagesummary" tabindex="-1">Type Alias: MessageSummary <a class="header-anchor" href="#type-alias-messagesummary" aria-label="Permalink to &quot;Type Alias: MessageSummary&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageSummary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: object;</span></span></code></pre></div><p>MessageSummary struct for frontend messages</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Attachments</code>?</td><td><code>number</code></td><td>Whether the message has any attachments</td></tr><tr><td><code>Bcc</code>?</td><td><a href="./Address.html"><code>Address</code></a>[]</td><td>Bcc addresses</td></tr><tr><td><code>Cc</code>?</td><td><a href="./Address.html"><code>Address</code></a>[]</td><td>Cc addresses</td></tr><tr><td><code>Created</code>?</td><td><code>string</code></td><td>Created time</td></tr><tr><td><code>From</code>?</td><td><a href="./Address.html"><code>Address</code></a></td><td>-</td></tr><tr><td><code>ID</code>?</td><td><code>string</code></td><td>Database ID</td></tr><tr><td><code>MessageID</code>?</td><td><code>string</code></td><td>Message ID</td></tr><tr><td><code>Read</code>?</td><td><code>boolean</code></td><td>Read status</td></tr><tr><td><code>ReplyTo</code>?</td><td><a href="./Address.html"><code>Address</code></a>[]</td><td>Reply-To address</td></tr><tr><td><code>Size</code>?</td><td><code>number</code></td><td>Message size in bytes (total)</td></tr><tr><td><code>Snippet</code>?</td><td><code>string</code></td><td>Message snippet includes up to 250 characters</td></tr><tr><td><code>Subject</code>?</td><td><code>string</code></td><td>Email subject</td></tr><tr><td><code>Tags</code>?</td><td><code>string</code>[]</td><td>Message tags</td></tr><tr><td><code>To</code>?</td><td><a href="./Address.html"><code>Address</code></a>[]</td><td>To address</td></tr></tbody></table>',6)]))}const g=t(r,[["render",o]]);export{m as __pageData,g as default};
